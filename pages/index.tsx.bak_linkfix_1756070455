import Layout from '../components/Layout'
import Head from 'next/head'
import Link from 'next/link'
import { Play, Newspaper, Clock } from 'lucide-react'
import type { GetStaticProps } from 'next'
import { fetchAllNews, NewsItem } from '../lib/rss'
import React, { useEffect, useState } from 'react'

type SEOVideo = {
  id: string
  title: string
  description?: string | null
  thumbnail?: string | null
  publishedAt?: string | null
  live?: boolean
  liveStart?: string | null
}

type Featured = {
  id: string
  title: string
  description?: string | null
  thumbnail?: string | null
  publishedAt?: string | null
  live?: boolean
  liveStart?: string | null
}

type Props = {
  news: NewsItem[]
  featured: Featured | null
  videosSeo: SEOVideo[]
}

const CHANNEL_ID = 'UCh31mRik5zu2JNIC-oUCBjg'

/** Lite YouTube: show thumbnail + play; load iframe only on click */
function LiteYouTube({ id, title, thumbnail }: { id: string; title: string; thumbnail?: string | null }) {
  const [playing, setPlaying] = useState(false)
  if (playing) {
    const src = `https://www.youtube.com/embed/${id}?autoplay=1&modestbranding=1&rel=0&iv_load_policy=3`
    return (
      <iframe
        title={title}
        className="w-full h-full"
        src={src}
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        allowFullScreen
      />
    )
  }
  const thumb = thumbnail || `https://i.ytimg.com/vi/${id}/hqdefault.jpg`
  return (
    <button
      onClick={() => setPlaying(true)}
      className="w-full h-full relative group"
      aria-label={`Play ${title}`}
    >
      <img src={thumb} alt={title} className="w-full h-full object-cover" />
      {/* lighter overlay: 15% -> 10% on hover */}
      <span className="absolute inset-0 bg-black/15 group-hover:bg-black/10 transition" />
      {/* gold play button */}
      <span className="absolute inset-0 flex items-center justify-center">
        <span
          className="rounded-full p-4 md:p-5 shadow ring-1 ring-black/10"
          style={{ backgroundColor: '#d4b36c' }}
        >
          <Play className="w-6 h-6" style={{ color: '#0c0c0c' }} />
        </span>
      </span>
    </button>
  )
}

export default function Home({ news, featured, videosSeo }: Props) {
  const [clientNews, setClientNews] = useState<NewsItem[]>(news)

  // Client-side fallback if build returned no news
  useEffect(() => {
    if (news && news.length > 0) return
    async function load() {
      try {
        const res = await fetch('/api/news')
        const j = await res.json()
        if (Array.isArray(j.items)) setClientNews(j.items)
      } catch {}
    }
    load()
  }, [news])

  return (
    <Layout>
      {/* JSON-LD: ItemList for the 9 videos on the page */}
      <Head>
        {Array.isArray(videosSeo) && videosSeo.length > 0 && (
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{
              __html: JSON.stringify({
                '@context': 'https://schema.org',
                '@type': 'ItemList',
                itemListElement: videosSeo.map((v, i) => ({
                  '@type': 'ListItem',
                  position: i + 1,
                  item: {
                    '@type': 'VideoObject',
                    name: v.title,
                    description: v.description || v.title,
                    thumbnailUrl: v.thumbnail ? [v.thumbnail] : undefined,
                    uploadDate: v.publishedAt || undefined,
                    embedUrl: `https://www.youtube.com/embed/${v.id}`,
                    url: `https://www.youtube.com/watch?v=${v.id}`,
                    publisher: {
                      '@type': 'Organization',
                      name: 'F1 Grandstand',
                      logo: {
                        '@type': 'ImageObject',
                        url: 'https://www.f1grandstand.com/F1-GRANDSTAND-LOGO-NEW.png',
                      },
                    },
                  },
                })),
              }),
            }}
          />
        )}
      </Head>

      {/* JSON-LD: Featured */}
      <Head>
        {featured && (
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{
              __html: JSON.stringify({
                '@context': 'https://schema.org',
                '@type': 'VideoObject',
                name: featured.title,
                description: featured.description || featured.title,
                thumbnailUrl: featured.thumbnail ? [featured.thumbnail] : undefined,
                uploadDate: featured.publishedAt || undefined,
                embedUrl: featured.id ? `https://www.youtube.com/embed/${featured.id}` : undefined,
                url: featured.id ? `https://www.f1grandstand.com/videos/${featured.id}` : undefined,
                publisher: {
                  '@type': 'Organization',
                  name: 'F1 Grandstand',
                  logo: {
                    '@type': 'ImageObject',
                    url: 'https://www.f1grandstand.com/F1-GRANDSTAND-LOGO-NEW.png',
                  },
                },
              }),
            }}
          />
        )}
      </Head>

      <header className="relative overflow-hidden">
        <div
          className="absolute inset-0 pointer-events-none"
          style={{ background: 'radial-gradient(80% 60% at 50% 0%, rgba(212,179,108,.2), transparent 60%)' }}
        />
        <div className="max-w-6xl mx-auto px-4 py-10 md:py-16 grid md:grid-cols-2 gap-8 items-center">
          {/* Left: latest video */}
          <div className="order-2 md:order-1">
            <div className="aspect-video rounded-3xl overflow-hidden ring-2 shadow-lg" style={{ borderColor: '#d4b36c' }}>
              {featured?.id ? (
                <LiteYouTube id={featured.id} title={featured.title} thumbnail={featured.thumbnail} />
              ) : (
                <div className="w-full h-full grid place-items-center text-neutral-400 text-sm">
                  Video unavailable right now
                </div>
              )}
            </div>
            {featured?.title && (
              <div className="mt-3">
                <p className="text-sm text-neutral-400 line-clamp-2">
                  <span className="font-semibold" style={{ color: '#f5e9c8' }}>Latest:</span> {featured.title}
                </p>
                <a
                  href={`https://www.youtube.com/watch?v=${featured?.id || ''}`}
                  target="_blank"
                  rel="noopener"
                  className="mt-2 inline-block rounded-2xl px-4 py-2 text-sm font-semibold"
                  style={{ backgroundColor: '#d4b36c', color: '#0c0c0c' }}
                >
                  Watch on YouTube
                </a>
              </div>
            )}
          </div>

          {/* Right: brand + CTA */}
          <div className="order-1 md:order-2">
            <span
              className="inline-flex items-center gap-2 text-xs font-semibold px-3 py-1 rounded-full"
              style={{ background: 'linear-gradient(90deg, #d4b36c, #c9a76d)', color: '#0c0c0c' }}
            >
              Formula 1 News
            </span>
            <h1 className="text-4xl md:text-6xl font-black leading-tight mt-3" style={{ color: '#f5e9c8' }}>
              Daily F1 News, Rumours & <span style={{ color: '#d4b36c' }}>Real Talk</span>
            </h1>
            <p className="mt-4 text-neutral-300 text-lg max-w-prose">
              F1 Grandstand delivers breaking Formula 1 news, driver market moves, and sharp analysis â€” plus fresh videos every week.
            </p>
            <div className="mt-6 flex flex-wrap gap-3">
              <a
                href="#videos"
                className="rounded-2xl px-5 py-3 transition inline-flex items-center gap-2 shadow"
                style={{ backgroundColor: '#181818', border: '1px solid #2a2a2a' }}
              >
                <Play className="w-5 h-5" /> Watch Latest Videos
              </a>
              <a
                href="#news"
                className="rounded-2xl px-5 py-3 transition inline-flex items-center gap-2 shadow"
                style={{ backgroundColor: '#d4b36c', color: '#0c0c0c' }}
              >
                <Newspaper className="w-5 h-5" /> Read F1 News
              </a>
            </div>
            <div className="mt-6 rounded-2xl overflow-hidden ring-1" style={{ borderColor: '#2a2a2a' }}>
              <img src="/F1 GRANDSTAND BANNER NEW.png" alt="F1 Grandstand banner" className="w-full object-cover" />
            </div>
          </div>
        </div>
      </header>

      {/* Videos (static, from server) */}
      <section id="videos" className="max-w-6xl mx-auto px-4 py-12">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl md:text-3xl font-extrabold" style={{ color: '#f5e9c8' }}>Latest F1 News Videos</h2>
          <a href="https://www.youtube.com/@F1Grandstand" target="_blank" rel="noopener noreferrer" className="inline-block rounded bg-red-600 px-4 py-2 text-white font-semibold shadow hover:bg-red-700 transition">Visit the F1 Grandstand YouTube Channel</a>
        </div>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
          {videosSeo.slice(0, 9).map((v) => (
            <article key={v.id} className="rounded-3xl overflow-hidden relative" style={{ backgroundColor: '#0f0f0f', border: '1px solid #2a2a2a' }}>
              <div className="aspect-video relative">
                <LiteYouTube id={v.id} title={v.title} thumbnail={v.thumbnail} />
              </div>
              <div className="p-4">
                <h3 className="font-semibold leading-snug line-clamp-2">{v.title}</h3>
                {v.publishedAt && (
                  <p className="text-xs text-neutral-400 mt-1 inline-flex items-center gap-1">
                    <Clock className="w-3 h-3" /> {new Date(v.publishedAt).toLocaleDateString()}
                  </p>
                )}
              </div>
            </article>
          ))}
        </div>
      </section>

      {/* News */}
      <section id="news" className="max-w-6xl mx-auto px-4 pb-16">
        <h2 className="text-2xl md:text-3xl font-extrabold mb-6" style={{ color: '#f5e9c8' }}>Latest F1 News</h2>
        <NewsGrid items={clientNews.slice(0, 12)} />
        <div className="mt-8 text-center">
          <Link href="/news" className="inline-block rounded-2xl px-5 py-3" style={{ backgroundColor: '#181818', border: '1px solid #2a2a2a' }}>
            More F1 news â†’
          </Link>
        </div>
      </section>
    </Layout>
  )
}

export const getStaticProps: GetStaticProps<Props> = async () => {
  // NEWS (server)
  const news = await fetchAllNews(60)

  // YouTube via Atom feed (no API key needed for server SEO & cards)
  async function fetchYouTubeAtom(channelId: string) {
    const url = `https://www.youtube.com/feeds/videos.xml?channel_id=${channelId}`
    try {
      const res = await fetch(url, {
        headers: {
          'user-agent':'Mozilla/5.0 (compatible; F1GrandstandBot/1.0; +https://www.f1grandstand.com)',
          accept: 'application/atom+xml, application/xml, text/xml; charset=utf-8',
        },
        cache: 'no-store',
      })
      if (!res.ok) return []
      const xml = await res.text()
      const entries = xml.split(/<entry[\s>]/i).slice(1)
      const vids = entries.map((entry) => {
        const seg = entry.split(/<\/entry>/i)[0]
        const title = (seg.match(/<title[^>]*>([\s\S]*?)<\/title>/i)?.[1] || '')
          .replace(/<!\[CDATA\[|\]\]>/g, '').trim()
        const published = (seg.match(/<published[^>]*>([\s\S]*?)<\/published>/i)?.[1] || '').trim()
        const videoId = (seg.match(/<yt:videoId[^>]*>([\s\S]*?)<\/yt:videoId>/i)?.[1] || '').trim()
        const thumb = (seg.match(/<media:thumbnail[^>]*url="([^"]+)"/i)?.[1] || '').trim() || null
        return { id: videoId, title, description: null, thumbnail: thumb, publishedAt: published || null, live: false, liveStart: null }
      })
      return vids.filter(v => v.id && v.title)
    } catch { return [] }
  }

  const videosSeo = await fetchYouTubeAtom(CHANNEL_ID)
  const featured = videosSeo[0]
    ? { id: videosSeo[0].id, title: videosSeo[0].title, description: videosSeo[0].description ?? null, thumbnail: videosSeo[0].thumbnail ?? null, publishedAt: videosSeo[0].publishedAt ?? null, live: false, liveStart: null }
    : null

  return { props: { news, featured, videosSeo }, revalidate: 300 }
}

// --- Components ---
function NewsGrid({ items }: { items: NewsItem[] }) {
  return (
    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
      {items.map((n, idx) => (
        <article key={idx} className="p-5 rounded-3xl" style={{ backgroundColor: '#0f0f0f', border: '1px solid #2a2a2a' }}>
          <a href={n.link} target="_blank" rel="noreferrer" className="block">
            <h3 className="font-semibold text-lg leading-snug hover:underline line-clamp-2" style={{ color: '#f5e9c8' }}>
              {n.title}
            </h3>
          </a>
          <p className="text-xs text-neutral-400 mt-1">
            {formatDate(n.isoDate)} â€¢ {n.source}
          </p>
          {n.excerpt && <p className="text-sm text-neutral-300 mt-3">{n.excerpt}â€¦</p>}
          <a className="text-sm inline-block mt-3" style={{ color: '#d4b36c' }} href={n.link} target="_blank" rel="noopener">
            Read more â†’
          </a>
        </article>
      ))}
    </div>
  )
}

function formatDate(d?: string) {
  if (!d) return ''
  try { return new Date(d).toLocaleString() } catch { return '' }
}
